
// Global variable to hold shared information for the SPA.
var wb5frmproto = {};

/**
 * Framework enumeration, helpful for minification
 */
var methodHttp = {
	post: "POST",
	get: "GET",
	put: "PUT",
	delete: "DELETE"
}

/**
 * Build a JWS with the key generated by server and userName
 */
function _genJWS(secretkey, userName){
	console.log("secretkey : " + secretkey);
	console.log("userName : " + userName);
	var sHead = {
		"alg": "HS256",
		"typ": "JWT"
	  }
	
	var sPayload = {
		"sub": "1234567890",
		"name": userName,
		"iat": 1516239022
	  };
	
	var sResult = null;
	try {
	  sResult = KJUR.jws.JWS.sign(sHead.alg, sHead, sPayload, secretkey);
	  console.log("_genJWS : " + sResult);
	  return sResult;
	} catch (ex) {
	  alert("Error: " + ex);
	}

}



// Pre load the secrectKey when page is loading 

$( document ).ready(function() {
	
	fetch( "http://localhost:8080/api/v0.1/users/getSecretKey", {
			method: methodHttp.get,
			mode: "cors",
			cache: "no-store",
			headers: {
				"Accept": "application/json",
				"Content-Type": "application/json"				
			},		
		}).then( function( response ) {

			console.log( response );
			return response.json();

		}).then( function( data ) {

		// Set the input field with unique ID #secretkey to a random key
			console.log( data.secretkey );
			$("#secretkey").val(data.secretkey);

		}).catch( function( error ) {
			console.log( "ERROR" )
			console.log( error );

		});// after the page elements are all loaded, then run the script
	
	});



/*
 *
 * Login Module
 *
 *
 */


( function( $, wb5 ) {
"use strict";


/**
 * Build a JWT token (Create it as a base object)
 */
function getJWT(){
	return "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ4LW5vdGlmeSJ9.teDEvmLRF-86tF9x2U7odsJRCbwLjX1-Hf2us5t3R7o"
}


/**
 * Need Polyfill

 * Fetch
 * Promise
 */

var xny_login = {

	"@context": "https://vocab.canada.ca/mws/x-2020/xny/login#",

	isConnected: false,

	logout: function() {

		
		fetch( "http://localhost:8080/api/v0.1/users/logout", {
			method: methodHttp.get,
			mode: "cors",
			cache: "no-store",
			headers: {
				"Accept": "application/json",
				"Content-Type": "application/json"
				//"Authorization": "Bearer " + _genJWS(loginFormObject.secretkey, loginFormObject.username)				
			},
			//body: JSON.stringify( loginFormObject )
		}).then( function( response ) {

			console.log( response );
			return response.json();

		}).then( function( data ) {

			//xny_login.secretkey = data.secretkey;
			console.log( data );
			xny_login.isConnected = false;

		}).catch( function( error ) {
			console.log( "ERROR" )
			console.log( error );

		});

		//xny_login.isConnected = false;

		delete xny_login.jwt;
		// refresh the page
		window.location.reload();
		
		console.log( xny_login );
	},

	login: function() {

		var loginForm = $('.form-horizontal').serializeArray();
		var loginFormObject = {};
		
		$.each(loginForm,
    		function(i, v) {
        		loginFormObject[v.name] = v.value;
			});
			console.log("loginFormObject  " + JSON.stringify(loginFormObject)) ;
			console.log("loginFormObject username " + loginFormObject.username)	;
			console.log("loginFormObject secretkey " + loginFormObject.secretkey)	;
			xny_login.username = loginFormObject.username;

		fetch( "http://localhost:8080/api/v0.1/users/login", {
			method: methodHttp.post,
			mode: "cors",
			cache: "no-store",
			headers: {
				"Accept": "application/json",
				"Content-Type": "application/json",
				"Authorization": "Bearer " + _genJWS(loginFormObject.secretkey, loginFormObject.username)				
			},
			body: JSON.stringify( loginFormObject )
		}).then( function( response ) {

			console.log( response );
			return response.json();

		}).then( function( data ) {

			xny_login.secretkey = data.secretkey;
			console.log( data.secretkey );
			xny_login.isConnected = true;

		}).catch( function( error ) {
			console.log( "ERROR" )
			console.log( error );

		});

	}
};

wb5[ 'xny_login' ] = xny_login;


// Get the DOM instance
xny_login.elm = document.querySelector( "xny-login[state=logout]" );


// GUI markup by state
var xny_login_tmpl = {
	logout: '<h2>Login</h2>\n' +
		'<div class="form-horizontal" data-action="http://localhost:8080/api/v0.1/users/login">\n' +
		'	<div class="form-group">\n' +
		'		<label for="login-username" class="col-sm-4 control-label">Username</label>\n' +
		'		<div class="col-sm-8">\n' +
		'			<input type="text" class="form-control" id="login-username" name="username" />\n' +
		'		</div>\n' +
		'	</div>\n' +
		'	<div class="form-group">\n' +
		'		<label for="login-password" class="col-sm-4 control-label">Password</label>\n' +
		'		<div class="col-sm-8">\n' +
		'			<input class="form-control" id="login-password" name="password" type="password" /> <input type=”text” name=”secretkey” id="secretkey">\n' +
		'		</div>\n' +
		'	</div>\n' +
		'	<div class="form-group">\n' +
		'		<div class="col-sm-offset-4 col-sm-10">\n' +
		'			<button data-wb5-on="login" id="btnLogin" type="button" class="btn btn-default">Login</button>\n' +
		'		</div>\n' +
		'	</div>\n' +
		'</div>',
	login: '<p>Your are connected. <button data-wb5-on="logout" type="button" class="btn btn-link">disconnect</button></p>'
}


// GUI binding, using observer - Proxy will be also acceptable, research need to be completed in 
// order to use the best of both approach.
Object.defineProperty( xny_login, "isConnected", {
	get: function get() {
		return xny_login._isConnected;
	},
	set: function set( isConnected ) {
		xny_login._isConnected = isConnected;

		// Initiate the template change
		if ( isConnected ) {

			// Change to login template
			xny_login.elm.innerHTML = xny_login_tmpl.login;
			bindEventHandler();

		} else {

			// Change to logout template
			xny_login.elm.innerHTML = xny_login_tmpl.logout;
			bindEventHandler();
		}
	}
} );


function bindEventHandler() {
	var elmToBind = xny_login.elm.querySelectorAll( "[data-wb5-on]" );

	for ( var i = 0; i < elmToBind.length; i++ ) {

		// GUI event hook
		$( elmToBind[ i ] ).click( xny_login[ elmToBind[ i ].dataset.wb5On ] );
	}
}

bindEventHandler();




} )( jQuery, wb5frmproto );



/*
 *
 * Do an action which include the jwt signed token
 *
 *
 */

( function( $, wb5 ) {
"use strict";


$( "#doAnAction" ).click( function( event ) {
	
	var xny_login= wb5[ 'xny_login' ] ; 
	var secretkey = xny_login.secretkey;
	//var userName = xny_login.username;
	var myList = document.getElementById('userInfo');

	// Create the jwt
	// Send request to the server
	// Show a response from the server
	//console.log(xny_login.jwt);

	// use this jwt token to post to the protected resource 
	// 
	fetch( "http://localhost:8080/api/v0.1/users/mailing/create/123", {
			method: methodHttp.get,
			mode: "cors",
			cache: "no-store",
			headers: {
				"Accept": "application/json",
				"Content-Type": "application/json",
				"Authorization": "Bearer " + _genJWS(secretkey, xny_login.username)
			},
			//body: JSON.stringify( {secretkey : secretkey} )
		}).then(function(response) {
			if (!response.ok) {
			  throw new Error("HTTP error, status = " + response.status);
			}
			// get the response body as json
			return response.json();
		})
		  .then(function(json) {

			console.log(json);

			
				var listItem = document.createElement('li');
				listItem.innerHTML = '<strong>' + json.created + '</strong>';
				listItem.innerHTML +=' ID as ' + json.id + '.';
				listItem.innerHTML +=' Title: <strong>' + json.title + '</strong>';
				listItem.innerHTML +=' for User: <strong>' + json.user.name + '</strong>';
				
				myList.appendChild(listItem);
			 

		}).catch( error => {
			console.log( "ERROR" )
			console.log( error );

		});

});


} )( jQuery, wb5frmproto );